import RepoVulnAlertsQuery from './RepoVulnAlertsQuery';
import { repoVulnAlerts } from './testResponses';

describe('RepoVulnAlertsQuery', () => {
  describe('#iterateVulnerabilityAlerts', () => {
    test('Pulling data out without filters', async () => {
      const iteratee = jest.fn();
      const execute = jest
        .fn()
        .mockResolvedValueOnce(repoVulnAlerts[0])
        .mockResolvedValueOnce(repoVulnAlerts[1]);

      // Act
      const result = await RepoVulnAlertsQuery.iterateVulnerabilityAlerts(
        {
          login: 'J1-Test',
          repoName: 'happy-sunshine',
          stateFilter: [],
          severityFilter: [],
        },
        execute,
        iteratee,
      );

      // Assert
      expect(result.totalCost).toBe(2);
      expect(iteratee).toHaveBeenCalledTimes(2);
      expect(iteratee.mock.calls[0][0]).toMatchSnapshot();
      expect(iteratee.mock.calls[1][0]).toMatchSnapshot();
      expect(execute).toHaveBeenCalledTimes(2);
      expect(execute.mock.calls[0][0]).toMatchSnapshot();
      expect(execute.mock.calls[1][0]).toMatchSnapshot();
    });
    test('Pulling data out with filters', async () => {
      const iteratee = jest.fn();
      const execute = jest
        .fn()
        .mockResolvedValueOnce(repoVulnAlerts[0])
        .mockResolvedValueOnce(repoVulnAlerts[1]);

      // Act
      const result = await RepoVulnAlertsQuery.iterateVulnerabilityAlerts(
        {
          login: 'J1-Test',
          repoName: 'happy-sunshine',
          stateFilter: ['OPEN'],
          severityFilter: ['CRITICAL', 'HIGH'],
        },
        execute,
        iteratee,
      );

      // Assert
      expect(result.totalCost).toBe(2);
      expect(iteratee).toHaveBeenCalledTimes(1);
      expect(iteratee.mock.calls[0][0]).toMatchSnapshot();
      expect(execute).toHaveBeenCalledTimes(2);
      expect(execute.mock.calls[0][0]).toMatchSnapshot();
      expect(execute.mock.calls[1][0]).toMatchSnapshot();
    });
  });
});

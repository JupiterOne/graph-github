import { Recording } from '@jupiterone/integration-sdk-testing';
import { sanitizeConfig } from '../config';
import { integrationConfig } from '../../test/config';
import { setupGithubRecording } from '../../test/recording';
import {
  GithubEntities,
  GITHUB_REPO_FINDING_RELATIONSHIP_TYPE,
  GITHUB_FINDING_CVE_RELATIONSHIP_TYPE,
  GITHUB_FINDING_CWE_RELATIONSHIP_TYPE,
} from '../constants';
import { invocationConfig } from '..';
import { executeStepWithDependencies } from '../../test/executeStepWithDependencies';
import { vulnerabilityAlertsSteps } from './vulnerabilityAlertsSteps';

jest.setTimeout(30000);

let recording: Recording;
afterEach(async () => {
  await recording.stop();
});

test('fetchVulnerabilityAlerts exec handler', async () => {
  recording = setupGithubRecording({
    directory: __dirname,
    name: 'vulnAlerts',
  });
  sanitizeConfig(integrationConfig);

  const { collectedEntities, collectedRelationships, encounteredTypes } =
    await executeStepWithDependencies({
      stepId: vulnerabilityAlertsSteps[0].id,
      invocationConfig: invocationConfig as any,
      instanceConfig: integrationConfig,
    });

  expect({
    numCollectedEntities: collectedEntities.length,
    numCollectedRelationships: collectedRelationships.length,
    collectedEntities: collectedEntities,
    collectedRelationships: collectedRelationships,
    encounteredTypes: encounteredTypes,
  }).toMatchSnapshot();

  const alerts = collectedEntities.filter(
    (e) => e._type === GithubEntities.GITHUB_VULNERABILITY_ALERT._type,
  );
  expect(alerts.length).toBeGreaterThan(0);
  expect(alerts).toMatchGraphObjectSchema({
    ...GithubEntities.GITHUB_VULNERABILITY_ALERT,
    disableClassMatch: true,
  });

  // relationships
  const repoFindings = collectedRelationships.filter(
    (e) => e._type === GITHUB_REPO_FINDING_RELATIONSHIP_TYPE,
  );
  expect(repoFindings.length).toBeGreaterThan(0);
  const findingCves = collectedRelationships.filter(
    (e) => e._type === GITHUB_FINDING_CVE_RELATIONSHIP_TYPE,
  );
  expect(findingCves.length).toBeGreaterThan(0);
  const findingCwes = collectedRelationships.filter(
    (e) => e._type === GITHUB_FINDING_CWE_RELATIONSHIP_TYPE,
  );
  expect(findingCwes.length).toBeGreaterThan(0);
});

test('fetchVulnerabilityAlerts with filtering', async () => {
  recording = setupGithubRecording({
    directory: __dirname,
    name: 'vulnAlertsWithFiltering',
  });
  integrationConfig.enableDependabotAlerts = true;
  integrationConfig.dependabotAlertStates = ['OPEN'];
  integrationConfig.dependabotAlertSeverities = ['CRITICAL'];

  sanitizeConfig(integrationConfig);

  const { collectedEntities, collectedRelationships, encounteredTypes } =
    await executeStepWithDependencies({
      stepId: vulnerabilityAlertsSteps[0].id,
      invocationConfig: invocationConfig as any,
      instanceConfig: integrationConfig,
    });

  expect({
    numCollectedEntities: collectedEntities.length,
    numCollectedRelationships: collectedRelationships.length,
    collectedEntities: collectedEntities,
    collectedRelationships: collectedRelationships,
    encounteredTypes: encounteredTypes,
  }).toMatchSnapshot();

  const githubFindingEntities = collectedEntities.filter(
    (e) => e._type === 'github_finding',
  );

  expect(
    githubFindingEntities.some((entity) =>
      ['LOW', 'MODERATE', 'HIGH'].includes(entity.severity as string),
    ),
  ).toBeFalsy();
  expect(githubFindingEntities.some((entity) => !entity.open)).toBeFalsy();
});

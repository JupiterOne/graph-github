import {
  createDirectRelationship,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';
import { IntegrationConfig } from '../config';
import { getOrCreateApiClient } from '../client';
import { RepoEntity, VulnerabilityAlertEntity } from '../types';
import {
  GITHUB_FINDING_CVE_RELATIONSHIP_TYPE,
  GITHUB_FINDING_CWE_RELATIONSHIP_TYPE,
  GITHUB_REPO_FINDING_RELATIONSHIP_TYPE,
  GithubEntities,
} from '../constants';
import {
  createCveEntity,
  createCweEntity,
  createFindingCveRelationship,
  createFindingCweRelationship,
  createVulnerabilityAlertEntity,
} from '../sync/converters';
import { findCve } from '../sync/converterUtils';

export async function fetchVulnAlerts({
  instance,
  logger,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const { config } = instance;
  const apiClient = getOrCreateApiClient(config, logger);

  await jobState.iterateEntities<RepoEntity>(
    { _type: GithubEntities.GITHUB_REPO._type },
    async (repoEntity) => {
      await apiClient.iterateRepoVulnAlerts(repoEntity, async (vulnAlert) => {
        const vulnAlertEntity = (await jobState.addEntity(
          createVulnerabilityAlertEntity(vulnAlert, config.githubApiBaseUrl),
        )) as VulnerabilityAlertEntity;

        await jobState.addRelationship(
          createDirectRelationship({
            _class: RelationshipClass.HAS,
            from: repoEntity,
            to: vulnAlertEntity,
          }),
        );

        const cve = findCve(vulnAlert);
        if (cve) {
          const cvss = vulnAlert.securityAdvisory?.cvss;
          const cveEntity = createCveEntity(cve, cvss);

          await jobState.addRelationship(
            createFindingCveRelationship(vulnAlertEntity, cveEntity),
          );
        }

        const cwes = vulnAlert.securityAdvisory?.cwes ?? [];
        await Promise.all(
          cwes.map(async (cwe) => {
            const cweEntity = createCweEntity(cwe);

            await jobState.addRelationship(
              createFindingCweRelationship(vulnAlertEntity, cweEntity),
            );
          }),
        );
      });
    },
  );
}

export const vulnerabilityAlertsSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: 'fetch-vulnerability-alerts',
    name: 'Fetch Vulnerability Alerts',
    entities: [
      {
        resourceName: 'GitHub Vulnerability Alerts',
        _type: GithubEntities.GITHUB_VULNERABILITY_ALERT._type,
        _class: GithubEntities.GITHUB_VULNERABILITY_ALERT._class,
      },
      {
        resourceName: 'CVE',
        _type: GithubEntities.CVE._type,
        _class: GithubEntities.CVE._class,
      },
      {
        resourceName: 'CWE',
        _type: GithubEntities.CWE._type,
        _class: GithubEntities.CWE._class,
      },
    ],
    relationships: [
      {
        _type: GITHUB_REPO_FINDING_RELATIONSHIP_TYPE,
        sourceType: GithubEntities.GITHUB_REPO._type,
        _class: RelationshipClass.HAS,
        targetType: GithubEntities.GITHUB_VULNERABILITY_ALERT._type,
      },
      {
        _type: GITHUB_FINDING_CVE_RELATIONSHIP_TYPE,
        sourceType: GithubEntities.GITHUB_VULNERABILITY_ALERT._type,
        _class: RelationshipClass.IS,
        targetType: GithubEntities.CVE._type,
      },
      {
        _type: GITHUB_FINDING_CWE_RELATIONSHIP_TYPE,
        sourceType: GithubEntities.GITHUB_VULNERABILITY_ALERT._type,
        _class: RelationshipClass.EXPLOITS,
        targetType: GithubEntities.CWE._type,
      },
    ],
    dependsOn: ['fetch-repos'],
    executionHandler: fetchVulnAlerts,
  },
];

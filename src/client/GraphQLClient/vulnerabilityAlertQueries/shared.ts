import utils, { EnterpriseFeatures } from '../utils';

type VersionSafeFragments = {
  query: string;
  vulnerabilityAlerts: string;
  additionalFields: string;
};

/**
 * Depending on the version of GHE Server, provide a supported query.
 * @param gheServerVersion
 */
export const buildVersionSafeFragments = (
  gheServerVersion?: string,
): VersionSafeFragments => {
  const fragments = {
    query: '',
    vulnerabilityAlerts: '',
    additionalFields: '',
  };

  if (
    utils.isSupported(
      EnterpriseFeatures.REPO_VULN_ALERT_STATE_ARG,
      gheServerVersion,
    )
  ) {
    fragments.query =
      'query ($login: String!, $repoName: String!, $states: [RepositoryVulnerabilityAlertState!]!, $maxLimit: Int!, $alertsCursor: String) {\n';
    fragments.vulnerabilityAlerts =
      'vulnerabilityAlerts(first: $maxLimit, after: $alertsCursor, states: $states) {\n';
  } else {
    fragments.query =
      'query ($login: String!, $repoName: String!, $maxLimit: Int!, $alertsCursor: String) {\n';
    fragments.vulnerabilityAlerts =
      'vulnerabilityAlerts(first: $maxLimit, after: $alertsCursor) {\n';
  }

  if (
    utils.isSupported(
      EnterpriseFeatures.REPO_VULN_ALERT_FIELDS,
      gheServerVersion,
    )
  ) {
    fragments.additionalFields = 'fixedAt\n number\n state';
  }

  return fragments;
};

export const ALL_ALERT_STATES = ['FIXED', 'DISMISSED', 'OPEN'];

export const vulnerabilityAlertsTotalCountFragment = ({
  gheServerVersion,
  alertStates,
}: {
  alertStates: string[];
  gheServerVersion?: string;
}) => {
  let fragment = '';
  if (
    utils.isSupported(
      EnterpriseFeatures.REPO_VULN_ALERT_STATE_ARG,
      gheServerVersion,
    )
  ) {
    const states = alertStates.length === 0 ? ALL_ALERT_STATES : alertStates;
    fragment = `vulnerabilityAlerts(states: [${states.join(', ')}]) {\n`;
  } else {
    fragment = 'vulnerabilityAlerts {\n';
  }
  fragment += '  totalCount\n';
  fragment += '}\n';
  return fragment;
};

export const vulnAlertsFields = (
  versionSafeFragments: VersionSafeFragments,
) => `
  ${versionSafeFragments.vulnerabilityAlerts}
    nodes {
      id
      repository {
        nameWithOwner
      }
      createdAt
      dependencyScope
      dismissReason
      dismissedAt
      dismisser {
        login
        name
        email
      }
      ${versionSafeFragments.additionalFields}
      securityAdvisory {
        cvss {
          vectorString
          score
        }
        cwes(first: $maxLimit) {
          nodes {
            cweId
            name
            description
          }
        }
        databaseId
        description
        ghsaId
        id
        identifiers {
          type
          value
        }
        notificationsPermalink
        origin
        permalink
        publishedAt
        references {
          url
        }
        severity
        summary
        updatedAt
        withdrawnAt
      }
      securityVulnerability {
        firstPatchedVersion {
          identifier
        }
        package {
          name
          ecosystem
        }
        severity
        updatedAt
        vulnerableVersionRange
      }
      vulnerableManifestFilename
      vulnerableManifestPath
      vulnerableRequirements
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
`;

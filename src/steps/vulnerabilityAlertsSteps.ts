import {
  createDirectRelationship,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';
import { IntegrationConfig } from '../config';
import { getOrCreateApiClient } from '../client';
import { RepoEntity, VulnerabilityAlertEntity } from '../types';
import {
  GithubEntities,
  IngestionSources,
  MappedRelationships,
  Relationships,
  Steps,
} from '../constants';
import {
  createCveEntity,
  createCweEntity,
  createFindingCveRelationship,
  createFindingCweRelationship,
  createVulnerabilityAlertEntity,
} from '../sync/converters';
import { findCve } from '../sync/converterUtils';
import { MAX_REQUESTS_LIMIT } from '../client/GraphQLClient/paginate';

export async function fetchVulnAlerts({
  instance,
  logger,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const { config } = instance;
  const apiClient = getOrCreateApiClient(config, logger);

  const maxRequestLimit =
    config.dependyabotAlertRequestLimit ?? MAX_REQUESTS_LIMIT;

  await jobState.iterateEntities<RepoEntity>(
    { _type: GithubEntities.GITHUB_REPO._type },
    async (repoEntity) => {
      await apiClient.iterateRepoVulnAlerts(
        repoEntity,
        maxRequestLimit,
        async (vulnAlert) => {
          const vulnAlertEntity = (await jobState.addEntity(
            createVulnerabilityAlertEntity(vulnAlert, config.githubApiBaseUrl),
          )) as VulnerabilityAlertEntity;

          await jobState.addRelationship(
            createDirectRelationship({
              _class: RelationshipClass.HAS,
              from: repoEntity,
              to: vulnAlertEntity,
            }),
          );

          const cve = findCve(vulnAlert);
          if (cve) {
            const cvss = vulnAlert.securityAdvisory?.cvss;
            const cveEntity = createCveEntity(cve, cvss);

            await jobState.addRelationship(
              createFindingCveRelationship(vulnAlertEntity, cveEntity),
            );
          }

          const cwes = vulnAlert.securityAdvisory?.cwes ?? [];
          await Promise.all(
            cwes.map(async (cwe) => {
              const cweEntity = createCweEntity(cwe);

              await jobState.addRelationship(
                createFindingCweRelationship(vulnAlertEntity, cweEntity),
              );
            }),
          );
        },
      );
    },
  );
}

export const vulnerabilityAlertsSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: Steps.FETCH_VULNERABILITY_ALERTS,
    ingestionSourceId: IngestionSources.VULNERABILITY_ALERTS,
    name: 'Fetch Vulnerability Alerts',
    entities: [GithubEntities.GITHUB_VULNERABILITY_ALERT],
    relationships: [Relationships.REPO_HAS_FINDING],
    mappedRelationships: [
      MappedRelationships.FINDING_IS_CVE,
      MappedRelationships.FINDING_EXPLOITS_CWE,
    ],
    dependsOn: [Steps.FETCH_REPOS],
    executionHandler: fetchVulnAlerts,
  },
];
